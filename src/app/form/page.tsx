// Revised Loan Application Form with Conditional Sections + Questions + Document Upload + Progress Bar
"use client";
import { useState } from "react";

interface DocumentScores {
  [key: string]: number;
}
const LoanApplicationForm = () => {
  const [step, setStep] = useState(0);
  const [residency, setResidency] = useState("Tunisien");
  const [consent, setConsent] = useState(true);
  const [documents, setDocuments] = useState<DocumentScores>({});

  // New states to store all user input
  const [fullName, setFullName] = useState("");
  const [sexe, setSexe] = useState("Homme");
  const [age, setAge] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const [governorate, setGovernorate] = useState("");
  const [salary, setSalary] = useState("");
  const [foreignCountry, setForeignCountry] = useState("");
  const [currency, setCurrency] = useState("");
  const [foreignSalary, setForeignSalary] = useState("");
  const [loanType, setLoanType] = useState<string>("");
  const [loanAmount, setLoanAmount] = useState("");
  const [hasCessions, setHasCessions] = useState("");
  const [hasCurrentLoan, setHasCurrentLoan] = useState(false);
  const [currentLoanType, setCurrentLoanType] = useState("");
  const [currentLoanAmount, setCurrentLoanAmount] = useState("");
  const [passedHalfPeriod, setPassedHalfPeriod] = useState("");
  const gouvernorats = [
    "Tunis", "Ariana", "Ben Arous", "Manouba", "Nabeul", "Zaghouan",
    "Bizerte", "B√©ja", "Jendouba", "Le Kef", "Siliana", "Sousse",
    "Monastir", "Mahdia", "Sfax", "Kairouan", "Kasserine", "Sidi Bouzid",
    "Gab√®s", "M√©denine", "Tataouine", "Gafsa", "Tozeur", "K√©bili",
  ];

  const countries: string[] = [
    "France", "Allemagne", "Italie", "Canada", "USA", "Qatar", "Arabie Saoudite", "√âmirats Arabes Unis", "Royaume-Uni", "Belgique", "Espagne", "Libye", "Autre"
  ];

  const currencies: string[] = [
    "EUR", "USD", "CAD", "GBP", "QAR", "SAR", "TND", "AED", "LYD"
  ];
  const documentWeights: DocumentScores = {
    cin: 5,
    facture: 5,
    attestationTravail: 15,
    attestationSalaire: 15,
    fichesPaie: 10,
    cnss: 10,
    releveBancaire: 10,
    devis: 30,
    devisVoiture: 30,
    titreFonciers: 10,
    permisBatir: 10,
    devisConstruction: 10
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>, name: keyof DocumentScores): void => {
    const file = e.target.files?.[0];
    setDocuments((prev) => ({
      ...prev,
      [name]: file ? documentWeights[name] : 0,
    }));
  };


  const progress: number = Object.values(documents).reduce((acc: number, val: number): number => acc + (typeof val === "number" ? val : 0), 0);

  const nextStep = () => setStep((prev) => prev + 1);
  const prevStep = () => setStep((prev) => prev - 1);

  const getRequiredDocuments = (): { key: keyof DocumentScores, label: string }[] => {
    const baseDocs = [
      { key: 'cin', label: "Carte d'identit√© nationale" },
      { key: 'facture', label: "Facture STEG ou SONED" },
      { key: 'attestationTravail', label: "Attestation de Travail" },
      { key: 'attestationSalaire', label: "Attestation de salaire" },
      { key: 'fichesPaie', label: "Les trois derniers fiches de paie" },
      { key: 'cnss', label: "Historique CNSS ou CNRPS" },
      { key: 'releveBancaire', label: "Relev√© bancaire des 3 derniers mois" },
    ];

    if (loanType === "Cr√©dit de Consommation" || loanType === "Micro-cr√©dit") {
      return [...baseDocs, { key: 'devis', label: "Devis (Conso ou Micro cr√©dit)" }];
    }
    if (loanType === "Cr√©dit Auto") {
      return [...baseDocs, { key: 'devisVoiture', label: "Devis voiture (Cr√©dit auto)" }];
    }
    if (loanType === "Cr√©dit immobili√©" || loanType === "Achat d'un logement" || loanType === "Achat d'un terrain") {
      return [
        ...baseDocs,
        { key: 'titreFonciers', label: "Titre foncier / logement" },
        { key: 'devisConstruction', label: "Devis promoteur appartement" }
      ];
    }
    if (loanType === "Construction d'un logement") {
      return [
        ...baseDocs,
        { key: 'titreFonciers', label: "Titre foncier (Lot + logement)" },
        { key: 'permisBatir', label: "Permis de b√¢tir" },
        { key: 'devisConstruction', label: "Devis global de construction" },
      ];
    }
    return baseDocs;
  };

  const sendPersonalInfo = async () => {
    const payload = {
      fullName,
      sexe,
      age,
      phoneNumber,
      residency,
      governorate,
      salary,
    };

    try {
      const response = await fetch("/api/loan/personal-info", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error("Erreur lors de l'envoi des donn√©es");
      }

      console.log("Informations enregistr√©es");
    } catch (error) {
      console.error("Erreur:", error);
      alert("Une erreur est survenue lors de l'envoi des donn√©es.");
    }
  };

  const SendCreditInfo = async () => {
    const missingFields: string[] = [];

    if (!loanType.trim()) missingFields.push("Type de cr√©dit demand√©");
    if (!loanAmount.trim()) missingFields.push("Montant du cr√©dit demand√©");

    if (residency === "Tunisien") {
      if (!hasCessions) missingFields.push("Cessions sur salaire");
      if (!hasCurrentLoan && hasCurrentLoan !== false) missingFields.push("Cr√©dit en cours");

      if (hasCurrentLoan) {
        if (!currentLoanType.trim()) missingFields.push("Type du cr√©dit obtenu");
        if (!currentLoanAmount.trim()) missingFields.push("Montant du cr√©dit obtenu");
        if (!passedHalfPeriod) missingFields.push("D√©pass√© la moiti√© de la p√©riode");
      }
    }

    if (missingFields.length > 0) {
      alert("Veuillez remplir les champs suivants :\n\n" + missingFields.join("\n"));
      return;
    }

    try {
      // üëâ Replace this with your actual endpoint
      const res = await fetch("/api/credit-info", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          loanType,
          loanAmount,
          hasCessions,
          hasCurrentLoan,
          currentLoanType,
          currentLoanAmount,
          passedHalfPeriod,
          residency,
        }),
      });

      if (!res.ok) throw new Error("Erreur lors de l'envoi");

      nextStep();
    } catch (err) {
      alert("Une erreur est survenue lors de l'envoi des informations.");
      console.error(err);
    }
  };

  const handleSubmitForm = async (e: React.FormEvent) => {
    e.preventDefault();

    const submittedDocs = Object.entries(documents)
      .filter(([_, score]) => score > 0)
      .map(([docKey]) => docKey); // only the keys (names)

    try {
      const res = await fetch("/api/submit-documents", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          documentsSubmitted: submittedDocs,
          progress,
          // you can also include other user info if needed
        }),
      });

      if (!res.ok) throw new Error("Erreur lors de l'envoi");

      alert("Votre demande a bien √©t√© soumise !");
      // Optionally: reset state or navigate
    } catch (error) {
      alert("Une erreur est survenue lors de la soumission.");
      console.error(error);
    }
  };


  return (
    <div className="max-w-3xl mx-auto bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg mt-8">
      <h2 className="text-2xl font-semibold text-center text-gray-700 dark:text-gray-200 mb-10">
        Le formulaire
      </h2>
      <form className="space-y-4">
        {/* Step 0: consent */}
        {step === 0 && (
          <div>
            <label className="block text-gray-700 dark:text-gray-300 font-medium mb-2">
              Cher client,
              Nous traitons vos donn√©es personnelles sur la base de votre consentement, et ce, apr√®s que vous ayez rempli le formulaire, car cela constitue un √©l√©ment essentiel de nos op√©rations. En tant que startup sp√©cialis√©e dans la technologie financi√®re, nous nous engageons √† vous offrir un accompagnement et des conseils adapt√©s afin de vous permettre d&apos;acc√©der aux meilleurs services des banques et institutions financi√®res, en ad√©quation avec votre situation personnelle.
              Nous veillerons en tout temps √† pr√©server la confidentialit√© et la protection de toutes vos donn√©es personnelles recueillies, lesquelles ne seront en aucun cas divulgu√©es.
            </label>
            <div className="flex gap-4">
              <button
                type="button"
                onClick={() => { setConsent(true); nextStep(); }}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
              >
                Oui
              </button>
              <button
                type="button"
                onClick={() => { setConsent(false); }}
                className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
              >
                Non
              </button>
            </div>
          </div>
        )}
        {step === 0 && consent === false && (
          <div className="mt-6 bg-red-50 p-4 rounded-lg border border-red-300">
            <p className="text-red-700 font-semibold text-center mb-4">
              Cher client, vous ne pouvez pas poursuivre la proc√©dure en cas de refus de partager les donn√©es requises.
            </p>
            <div className="flex justify-center gap-4">

              <button
                type="submit"
                className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
              >
                Envoyer quand m√™me
              </button>
            </div>
          </div>
        )}


        {/* Step 1: Residency
        {step === 1 && (
          <div>
            <label className="block text-gray-700 dark:text-gray-300 font-medium mb-2">
              R√©sidez-vous en Tunisie ?
            </label>
            <div className="flex gap-4">
              <button
                type="button"
                onClick={() => { setResidency("Tunisien"); nextStep(); }}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
              >
                Oui
              </button>
              <button
                type="button"
                onClick={() => { setResidency("Tunisien √† l'√©tranger"); nextStep(); }}
                className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
              >
                Non
              </button>
            </div>
          </div>
        )}
 */}
        {/* Step 2: Donn√©es personnelles */}
        {step === 1 && (
          <div>
            <h3 className="text-xl font-semibold mb-4 text-gray-600 dark:text-gray-300">
              Donn√©es personnelles
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <label>1. Nom & Pr√©nom*<input value={fullName} onChange={(e) => setFullName(e.target.value)} type="text" required className="p-2 border rounded w-full" /></label>
              <label>4. Genre*
                <select
                  className="p-2 border rounded w-full"
                  value={sexe}
                  onChange={(e) => setSexe(e.target.value)}
                >
                  <option value="">S√©lectionner</option>
                  <option value="Homme">Homme</option>
                  <option value="Femme">Femme</option>
                </select>

              </label>
              <label>4. √Çge*<input value={age} onChange={(e) => setAge(e.target.value)} type="number" required className="p-2 border rounded w-full" /></label>
              <label>2. Num√©ro de t√©l√©phone*<input value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} type="tel" required className="p-2 border rounded w-full" /></label>
              {residency === "Tunisien" ? (
                <>
                  <label>3. Gouvernorat*
                    <select value={governorate} onChange={(e) => setGovernorate(e.target.value)} required className="p-2 border rounded w-full">
                      {gouvernorats.map((g, i) =>
                        <option key={i}>{g}</option>)}
                    </select>
                  </label>
                  <label>4. Salaire net (TND)*
                    <input value={salary} onChange={(e) => setSalary(e.target.value)} type="number" required className="p-2 border rounded w-full" />
                  </label>
                </>
              ) : (
                <>
                  <label>3. Lieu de r√©sidence*<select required className="p-2 border rounded w-full">{countries.map((c, i) => <option key={i}>{c}</option>)}</select></label>
                  <label>4. Devise de r√©sidence*<select required className="p-2 border rounded w-full">{currencies.map((c, i) => <option key={i}>{c}</option>)}</select></label>
                  <label>5. Revenu mensuel en devise*<input type="number" required className="p-2 border rounded w-full" /></label>
                </>
              )}

            </div>
            <div className="flex justify-between mt-6">
              <button onClick={prevStep} type="button" className="px-4 py-2 bg-gray-500 text-white rounded">Retour</button>
              <button
                type="button"
                onClick={async () => {
                  const missingFields: string[] = [];

                  if (!fullName.trim()) missingFields.push("Nom & Pr√©nom");
                  if (!phoneNumber.trim()) missingFields.push("Num√©ro de t√©l√©phone");
                  if (!age.trim()) missingFields.push("√Çge");
                  if (!sexe) missingFields.push("Genre");

                  if (residency === "Tunisien") {
                    if (!governorate) missingFields.push("Gouvernorat");
                    if (!salary.trim()) missingFields.push("Salaire net (TND)");
                  } else {
                    if (!foreignCountry) missingFields.push("Lieu de r√©sidence");
                    if (!currency) missingFields.push("Devise de r√©sidence");
                    if (!foreignSalary.trim()) missingFields.push("Revenu mensuel en devise");
                  }

                  if (missingFields.length > 0) {
                    alert("Veuillez remplir les champs suivants :\n\n" + missingFields.join("\n"));
                  } else {
                    await sendPersonalInfo();
                    nextStep();
                  }
                }}
                className="px-4 py-2 bg-green-600 text-white rounded"
              >
                Suivant
              </button>


            </div>
          </div>
        )}

        {/* Step 3: Cr√©dit demand√© */}
        {step === 2 && (
          <div>
            <h3 className="text-xl font-semibold mb-4 text-gray-600 dark:text-gray-300">
              Informations sur le cr√©dit demand√©
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <label>1. Type de cr√©dit demand√©*
                <select value={loanType} required className="p-2 border rounded w-full" onChange={(e) => setLoanType(e.target.value)}>
                  {residency === "Tunisien" ? (
                    <>
                      <option>Cr√©dit immobili√©</option>
                      <option>Cr√©dit de Consommation</option>
                      <option>Cr√©dit Auto</option>
                      <option>Micro-cr√©dit</option>
                    </>
                  ) : (
                    <>
                      <option>Achat d&apos;un logement</option>
                      <option>Construction d&apos;un logement</option>
                      <option>Achat d&apos;un terrain</option>
                    </>
                  )}
                </select></label>
              <label>2. Montant du cr√©dit demand√© (TND)*
                <input value={loanAmount} onChange={(e) => setLoanAmount(e.target.value)} type="number" required className="p-2 border rounded w-full" />
              </label>
              {residency === "Tunisien" ? (
                <>
                  <label>3. Avez-vous des cessions sur salaire ?*
                    <select value={hasCessions} onChange={(e) => setHasCessions(e.target.value)} className="p-2 border rounded w-full">
                      <option>Oui</option>
                      <option>Non</option>
                    </select>
                  </label>
                  <label>4. Avez-vous un cr√©dit en cours ?*
                    <select onChange={(e) => setHasCurrentLoan(e.target.value === "Oui")} className="p-2 border rounded w-full">
                      <option>Non</option>
                      <option>Oui</option>
                    </select>
                  </label>
                  {hasCurrentLoan && (
                    <>
                      <label>
                        5. Type du cr√©dit obtenu*
                        <select
                          className="p-2 border rounded w-full"
                          value={currentLoanType}
                          onChange={(e) => setCurrentLoanType(e.target.value)}
                        >
                          <option value="">-- S√©lectionner --</option>
                          <option value="Cr√©dit immobili√©">Cr√©dit immobili√©</option>
                          <option value="Cr√©dit de Consommation">Cr√©dit de Consommation</option>
                          <option value="Cr√©dit Auto">Cr√©dit Auto</option>
                          <option value="Micro-cr√©dit">Micro-cr√©dit</option>
                        </select>
                      </label>

                      <label>
                        6. Montant du cr√©dit obtenu*
                        <input
                          type="number"
                          className="p-2 border rounded w-full"
                          value={currentLoanAmount}
                          onChange={(e) => setCurrentLoanAmount(e.target.value)}
                        />
                      </label>

                      <label>
                        7. D√©pass√© la moiti√© de la p√©riode ?*
                        <select
                          className="p-2 border rounded w-full"
                          value={passedHalfPeriod}
                          onChange={(e) => setPassedHalfPeriod(e.target.value)}
                        >
                          <option value="">-- S√©lectionner --</option>
                          <option value="Oui">Oui</option>
                          <option value="Non">Non</option>
                        </select>
                      </label>
                    </>
                  )}

                </>
              ) : (
                <>
                  <label>4. Avez-vous un cr√©dit en cours ?
                    <select className="p-2 border rounded w-full">
                      <option>Oui</option>
                      <option>Non</option>
                    </select>
                  </label>
                </>
              )}
            </div>
            <div className="flex justify-between mt-6">
              <button onClick={prevStep} type="button" className="px-4 py-2 bg-gray-500 text-white rounded">Retour</button>
              <button onClick={SendCreditInfo} type="button" className="px-4 py-2 bg-green-600 text-white rounded">Suivant</button>
            </div>
          </div>
        )}

        {step === 3 && (
          <div>
            <h3 className="text-xl font-semibold mb-4 text-gray-600 dark:text-gray-300">
              Suivi des documents du client
            </h3>

            <div className="mb-4">
              <div className="w-full bg-gray-200 rounded-full h-4 mb-2">
                <div
                  className="bg-green-500 h-4 rounded-full transition-all duration-300"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              <p className="text-center text-sm text-gray-600 dark:text-gray-300">
                Progression: {progress}%
              </p>
            </div>

            <div className="space-y-4">
              {getRequiredDocuments().map((doc) => (
                <div key={doc.key} className="flex flex-col sm:flex-row sm:items-center gap-2">
                  <label className="w-full sm:w-1/2 text-sm font-medium text-gray-700 dark:text-gray-200">
                    {doc.label}
                  </label>
                  <input
                    type="file"
                    onChange={(e) => handleFileChange(e, doc.key as keyof DocumentScores)}
                    className="w-full sm:w-1/2 border border-gray-300 rounded px-2 py-1 text-sm"
                  />
                </div>
              ))}
            </div>
            <div className="flex justify-between mt-6">
              <button onClick={prevStep} type="button" className="px-4 py-2 bg-gray-500 text-white rounded">Retour</button>
              <button
                type="button"
                onClick={nextStep}
                className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700"
              >
                Soumettre la demande
              </button>
            </div>


          </div>
        )}
        {step === 4 && (
          <div>
            <h3 className="text-xl font-semibold mb-4 text-gray-600 dark:text-gray-300">
            Merci pour votre confiance en EasyBank !
            Nos experts vous contacteront dans les plus brefs d√©lais. 
            </h3>

            <button onClick={handleSubmitForm} type="button" className="px-4 py-2 bg-gray-500 text-white rounded">Retour</button>

          </div>
        )}
      </form>
    </div>
  );
};

export default LoanApplicationForm;